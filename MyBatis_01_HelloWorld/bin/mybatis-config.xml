<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- <environments default="development">
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="com.mysql.jdbc.Driver" />
				<property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
				<property name="username" value="root" />
				<property name="password" value="root" />
			</dataSource>
		</environment>
	</environments> -->
	<!-- 
         1.properties : mybatis 可以使用 properties 来应用外部 properties 配置文件的内容：
              resource : 引入类路径下的资源
              url:引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"/>
	<!-- 
	     2.settings 包含很重要的设置项
	     setting : 用来设置每一个设置项
	        name: 设置项目名
	        value: 设置项取值
	 -->
	<settings>
	    <setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>
	
	<!-- 
	      3.  typeAliases: 别名处理器，可以为java类型取别名
	                                   注意：别名不区分大小写
	 -->
	<typeAliases>
	    <!-- 
	        ①. typeAlias: 为某个java类型起别名
	        type:指名要起别名的类型全类名；默认别名   类名小写   employee
	        alias:指定新的别名
	     -->
	    <!-- <typeAlias type="com.test.mybatis.bean.Employee" alias="emp"/> -->
	    
	    <!-- 
	        ②. package:为某个包下的所有类批量起别名
	        name: 指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写））
	    -->
	    <package name="com.test.mybatis.bean"/>
	    <!-- 批量起别名的情况下，使用  @alias 注解为某个类型指定新的别名 -->
	</typeAliases>
	<!-- 
	    4. environments: 环境  mybatis可以配置多种环境，通过 default 指定使用某种环境。可以达到快速切换环境
	       environment : 配置一个具体的环境信息，必须有两个标签（id:代表当前环境的唯一标识）
	       transactionManager:事务管理器
	           type: 事务管理器的类别 ；JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
	           	 自定义事务管理器：实现 TransactionFactory 接口，type 指定全类名  
	       dataSource: 数据源； 
	           type:数据源类型  UNPOOLED(UnpooledDataSourceFactory)|
	                        POOLED(PooledDataSourceFactory)|
	                        JNDI(JndiDataSourceFactory)
	                                       自定义数据源：实现DataSourceFactory接口，type是全类名
	-->
	<environments default="development">
	    <environment id="test"> 
	        <transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.user}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
	    </environment>
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.user}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	
	<!-- 将我们写好的sql映射文件（EmployeeMapper.xml）注册到全局配置文件（mybatis-config.xml）中 -->
	<mappers>
		<mapper resource="EmployeeMapper.xml" />
	</mappers>
</configuration>