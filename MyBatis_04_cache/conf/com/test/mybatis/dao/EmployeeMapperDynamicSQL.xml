<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.test.mybatis.dao.EmployeeMapperDynamicSQL">
     <!-- 
        • if 判断
		• choose (when, otherwise)  分支选择   ； 带了break 的 swtich-case
		    如果带了 id 就用id查，如果带了 lastName 就用 lastName 查；只会进入其中一个
		• trim (where, set)  字符串截取 where: 封装查询条件   set:封装修改条件
		• foreach
      -->
      
      <!-- 查询员工，要求：携带了哪个字段查询条件就带上这个字段的值 -->
      <select id="getEmpsByConditionIf" resultType="com.test.mybatis.bean.Employee">
          select * from employee 
          <!-- where标签 只会去掉第一个多出来的 and 或者 or -->
          <where>
	          <!-- where 1=1 -->
	          <!-- 
	             test:判断表达式(OGNL)  
	             c:if test
	                                       从参数中取值进行判断
	                                       遇见特殊符号应该使用转义字符(① && : &amp;&amp;  ② '' : &quot;&quot;)
	          -->
	          <if test="id!=null">
	             and id = #{id}
	          </if>
	          <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
	          	 and last_Name like #{lastName}
	          </if>
	          <if test="email!=null and email.trim()!=&quot;&quot;">
	             and email = #{email}
	          </if>
	          <!-- ognl会进行字符串与数字的转换判断 "0" == 0 -->
	          <if test="gender==0 or gender==1">
	             and gender = #{gender}
	          </if>
          </where>
      </select>
      
      <select id="getEmpsByConditionTrim" resultType="com.test.mybatis.bean.Employee">
          select * from employee 
          <!-- 
             prefix="" : 前缀 trim标签体中是整个字符串拼串后的结果，  prefix 给拼串后的整个字符串加一个前缀
             prefixOverrides="" : 
                                                     前缀覆盖：去掉整个字符串前面多余的字符
             suffix="" : 后缀
                  suffix 给拼串后的整个字符串加一个后缀
             suffixOverrides="" 
              	    前缀覆盖：去掉整个字符串后面多余的字符
          -->
          <!-- 自定义字符串的截取规则 -->
          <trim prefix="where"  suffixOverrides="and">
	          <!-- where 1=1 -->
	          <!-- 
	             test:判断表达式(OGNL)  
	             c:if test
	                                       从参数中取值进行判断
	                                       遇见特殊符号应该使用转义字符(① && : &amp;&amp;  ② '' : &quot;&quot;)
	          -->
	          <if test="id!=null">
	             id = #{id} and
	          </if>
	          <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
	          	 last_Name like #{lastName} and
	          </if>
	          <if test="email!=null and email.trim()!=&quot;&quot;">
	             email = #{email} and
	          </if>
	          <!-- ognl会进行字符串与数字的转换判断 "0" == 0 -->
	          <if test="gender==0 or gender==1">
	             gender = #{gender} 
	          </if>
          </trim>
      </select>
      
      <select id="getEmpsByConditionChoose" resultType="com.test.mybatis.bean.Employee">
      	  select * from employee 
      	  <where>
      	     <!--  如果带了 id 就用id查，如果带了 lastName 就用 lastName 查；只会进入其中一个 -->
      	     <choose>
      	         <when test="id!=null">
      	             id = #{id}
      	         </when>
      	         <when test="lastName!=null">
      	             last_Name = #{lastName}
      	         </when>
      	         <when test="email!=null">
      	             email = #{email}
      	         </when>
      	         <otherwise>
      	             gender = 0
      	         </otherwise>
      	     </choose>
      	  </where>
      </select>
      
      <update id="updateEmp">
         <!--  使用 set 标签-->
          update employee
	      <set>
		     <if test="lastName!=null">
		         last_Name=#{lastName},
		     </if>
		     <if test="email!=null">
		         email=#{email},
		     </if>
		     <if test="gender!=null">
		         gender=#{gender}
		     </if>
	     </set> 
	     where id=#{id}
	     
	     <!-- 
	                     使用 trim 标签
	       update employee
	      <trim prefix="set" suffixOverrides=",">
		     <if test="lastName!=null">
		         last_Name=#{lastName},
		     </if>
		     <if test="email!=null">
		         email=#{email},
		     </if>
		     <if test="gender!=null">
		         gender=#{gender}
		     </if>
	     </trim> 
	     where id=#{id} -->
      </update>
      
      <select id="getEmpsByConditionForeach" resultType="com.test.mybatis.bean.Employee">
         select * from employee where id in 
         <!-- 
             collection : 指定要遍历的集合；  指定的方式有两种：
                 ① 在dao类该方法的参数中加上 @Param 注解 ；
                                      如：public List<Employee> getEmpsByConditionForeach(@Param("ids") List<Integer> ids);
                 ② 在方法的参数中没有加上 @Param 注解的时候，只需要修改 collection = "ids" 为 collection = list 即可
                 list 类型的参数会特殊处理封装到 map 中，map的key就叫list
             item: 将遍历出来的元素赋值给指定的变量
             separator:每个元素之间的分隔符
             open:遍历出所有结果拼接一个开始的字符
             close:遍历出所有结果拼接一个结束的字符
             index:索引  遍历list的时候是 list 是索引，item 就是当前的值
                                                                   遍历  map 的时候 index 表示的就是 map 的key,item 就是 map 的值
             #{变量名} 就能取出变量的值也就是当前遍历的元素
          -->
         <foreach collection="ids" item="item_id" separator="," open="(" close=")">
             #{item_id}
         </foreach>
      </select>
      
      <!-- 批量保存 -->
      <!-- mysql 下批量保存，可以 foreach 遍历 Mysql 支持 values(),(),() -->
      <insert id="addEmps">
          INSERT INTO employee(last_Name,email,gender,d_id) 
          VALUES
          <foreach collection="emps" item="emp" separator=",">
             (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
          </foreach>
      </insert> 
      
      <!-- 
                     这种批量添加的方式需要数据库连接是添加属性 allowMultiQueries=true  
                     这种使用分好分隔多个sql语句可以用于其他批量操作（删除、修改）
      -->
      <!-- <insert id="addEmps">
         <foreach collection="emps" item="emp" separator=";">
           INSERT INTO employee(last_Name,email,gender,d_id) 
           VALUES (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
         </foreach>
      </insert> -->
      
      <!-- 
           Oracle 数据库批量保存，它不支持 values(),(),() 
           Oracle 支持的批量保存的方式：
              ①  多个 insert 放在 begin - end  里面
                              例如：
                begin
                    insert into employees (employee_id,last_name,email)
                    values(employees_seq.nextVal,'test_01','test_01@qq.com');
                    insert into employees (employee_id,last_name,email)
                    values(employees_seq.nextVal,'test_02','test_02@qq.com');
                end;
              ②  利用中间表：
                insert into employees(employee_id,last_name,email)
                select employees_seq.nextVal,last_name,email from (
                    select 'test01' last_name,'test_01@qq.com' email from dual
                    union 
                    select 'test02' last_name,'test_02@qq.com' email from dual
                    union
                    select 'test03' last_name,'test_03@qq.com' email from dual
                )
      -->
      <insert id="addEmps" databaseId="oracle">
          <!-- <foreach collection="emps" item="emp" open="begin" close="end;">
              insert into employees (employee_id,last_name,email)
              values(employees_seq.nextVal,#{emp.lastName},#{emp.email});
          </foreach> -->
          insert into employees(
             <!-- 引用外部定义的 sql -->
             <include refid="insertColumn">
                <property name="testColumn" value="abc"/>
             </include>
          )
          select employees_seq.nextVal,last_name,email from
          <foreach collection="emps" item="emp" open="(" close=")" separator="union">
              select #{emp.lastName} last_name,#{emp.email} email from dual
          </foreach> 
      </insert>
      
      <!-- 
                   两个内置参数：
                     不只是方法传递过来的参数可以被用来判断，取值......
              mybatis 默认还有两个内置参数：
                _parameter: 代表整个参数
                                         单个参数：_parameter 就是这个参数
                                         多个参数：参数会被封装成 Map ； _parameter 就是代表这个 map
                _databaseId: 如果配置了databaseIdProvider 标签
                      _databaseId 就是代表了当前数据库的别名 oracle
                
       -->
       <select id="getEmpTestInnerParameter" resultType="com.test.mybatis.bean.Employee">
           <bind name="_lastName" value="'%'+lastName+'%'"/>
           <if test="_databaseId == 'mysql'">
               select * from employee 
               <if test="_parameter != null">
                   where last_Name like #{_lastName}
               </if> 
           </if>
           <if test="_databaseId == 'oracle'">
               select * from employees
           </if> 
       </select>
       
       <!-- 
                    抽取可重用的sql片段，方便后面使用 
                    1、sql 抽取：经常讲查询的列名，或者插入用的列名抽取出来方便引用
                    2、include 来引用已经抽取的sql
                    3、include 还可以自定义 property , sql 标签内部就可以使用自定义的属性
                           取值的正确方式：  ${prop},
               #{不能使用这种方式}
                        结果：insert into employees (employee_id,last_Name,email,abc) .......
       -->
       <sql id="insertColumn">
           <if test="_databaseId == 'oracle'">
              employee_id,last_Name,email,${testColumn}
           </if>
           <if test="_databaseId == 'mysql'">
           	  last_Name,email,gender,d_id
           </if>
       </sql>
 </mapper>