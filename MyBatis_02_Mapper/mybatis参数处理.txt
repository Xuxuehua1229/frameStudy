单个参数：mybatis不会做特殊处理
    #{参数名}:取出参数值
多个参数：mybatis 会做特殊处理
           多个参数会被封装成一个map
       key:param1......paramN，或者参数的索引
       value:传入的参数值
       #{} 就是从 map 中获取指定的key的值
    org.apache.ibatis.exceptions.PersistenceException: 
    Error querying database.  
    Cause: org.apache.ibatis.binding.BindingException: 
    Parameter 'id' not found. Available parameters are 
    [arg1, arg0, param1, param2]
    操作：
            方法：public Employee getEmpByLastNameAndId(Integer id,String lastName);
            取值：
    <select id="getEmpByLastNameAndId" resultType="com.test.mybatis.bean.Employee">
		select * from employee where id = #{id} and last_Name=#{lastName}
	</select>
命名参数：明确指定封装参数时map的key;@Param("id")
   多个参数会被封装成一个map
   key:使用 @Param 注解指定的值
   value:参数值
   #{指定的key}取出对应的参数值
   
pojo:
    如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入 pojo;
    #{属性名}：取出传入的Pojo的属性值
Map:
    如果多个参数不是业务模型中的数据，没有对应的pojo,不经常使用，为了方便，我们也可以传入map
    #{key值}：取出map中的值
 
TO:
   如果有多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个 TO （Transfer Object）数据传输对象
 Page{
    int index;
    int size;
 }

============================思考==============================================================
public Employee getEmp(@Param("id") Integer id,String lastName);
         取值： #{id/param1}   #{param2}
public Employee getEmp(Integer id,@Param("e") Employee emp);
        取值：#{param1}  #{param2.lastName/e.lastName}
        
##特别注意：如果是 Collection(List、Set) 类型或者数组，
                          也会做特殊处理。也是把传入的list或者数组封装在map中
         Key:Collection(collection),如果是List还可以使用这个key(List),数组{array}
public Employee getEmp(List<Integer> ids);
       取值：取出第一个id的值: #{list[0]}
============================结合源码，mybatis是怎么处理参数=============================================
public Employee getEmpByLastNameAndId
(@Param("id") Integer id,@Param("lastName") String lastName);

ParamNameResolver解析参数封装map的：
1. names： {0=id, 1=lastName} 构造器的时候就确定好了
     ① 获取每个标了 param 注解的参数的 @Param 的值 ： id,lastName; 赋值给name;
     ② 每次解析一个参数给map中保存信息：（Key是索引值，value:name的值）
         name的值：
                                    标注了 param 注解：注解的值
                                    没有标注：
              1. 全局配置：useActualParamName（jdk1.8）:name=参数名
              2. name=map.size();相当于当前元素的索引  {0=id, 1=lastName,2=2}

args[1,"Tom","Hello"]
public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    //1.参数为null直接返回
    if (args == null || paramCount == 0) {
      return null;
    //2.如果只有一个元素，并且没有 Param 注解；args[0] 单个参数直接返回
    } else if (!hasParamAnnotation && paramCount == 1) {
      return args[names.firstKey()];
    //3.多个元素或者有param注解
    } else {
      final Map<String, Object> param = new ParamMap<>();
      int i = 0;
      //4.遍历names集合：{0=id, 1=lastName,2="Hello"}
      for (Map.Entry<Integer, String> entry : names.entrySet()) {
      
        //names集合的value作为key;  names集合的key又作为取值的参考args[0]:args[1,"Tom"]
        //即为 {id=args[0]:1,lastName=args[1]:Tom,2=args[2]:Hello}
        param.put(entry.getValue(), args[entry.getKey()]);
        // add generic param names (param1, param2, ...)
        // 额外的将每一个参数也保存到map中，使用新的key:param1......paramN
        // 效果：有 Param 注解可以 #{指定的key},或者#{param1}
        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }


