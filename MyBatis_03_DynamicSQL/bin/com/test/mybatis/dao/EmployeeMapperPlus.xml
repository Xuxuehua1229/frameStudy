<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.test.mybatis.dao.EmployeeMapperPlus">
    <!-- 
                      自定义javaBean的封装规则：
        type:自定义规则的java类型
        id:唯一id 方便其引用
     -->
    <resultMap type="com.test.mybatis.bean.Employee" id="MySimpleEmp">
        <!-- 
                               指定主键列的封装规则
          id定义主键会底层有优化
          column:指定哪一列
          property:指定javaBean对应的属性
         -->
        <id column="id" property="id"/>
        <!-- 
                              定义普通列封装规则
         -->
        <result column="last_Name" property="lastName"/>
        <!-- 其他不指定的列会自动封装：只要写 resultMap 就把全部的映射规则都写上 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>
    <!-- resultMap:自定义结果集映射规则 -->
    <select id="getEmpById" resultMap="MySimpleEmp">
       select * from employee where id=#{id}
    </select>
 
 
    <!-- 
                       联合查询：
     -->
    <resultMap type="com.test.mybatis.bean.Employee" id="MyDiffEmp">
        <id column="id" property="id"/>
        <result column="lastName" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="department.id"/>
        <result column="deptName" property="department.departmentName"/>
    </resultMap>
    
    <!-- 使用 association 定义单个关联的单个对象的封装规则： -->
    <resultMap type="com.test.mybatis.bean.Employee" id="MyDiffEmp2">
    	<id column="id" property="id"/>
        <result column="lastName" property="lastName"/>
        <result column="gender" property="gender"/>
        <!-- 
            association:可以指定联合的javaBean对象
            property="department":指定哪个属性是级联对象
            javaType:指定这个属性的类型[不能省略]
         -->
        <association property="department" javaType="com.test.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="deptName" property="departmentName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDiffEmp2">
       select e.id id,e.last_Name lastName,e.gender gender,e.d_id d_id,d.id did,d.dept_name deptName 
       from employee e,department d 
       where e.d_id = d.id and e.id = #{id}
    </select>
 
    <!-- 使用 association 进行分步查询 -->
    <resultMap type="com.test.mybatis.bean.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_Name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!-- 
                                   使用 association 定义关联的单个对象的封装规则
            select:表明当前属性是调用 select 指定的方法查出的结果
            column:指定将哪一列的值传给这个方法
            
                                       流程：使用 select 指定的方法（传入 column 指定的这列参数的值）查出对象，并封装给 property 指定的属性
        -->
        <association property="department" select="com.test.mybatis.dao.DepartmentMapper.getDeptById" column="id">
            
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
       select * from employee where id = #{id}
    </select>
    
    <!-- 可以使用延迟加载 （按需加载/懒加载/延迟加载）
        Employee ===> Department
       	 每次查询Employee对象的时候，都将一起查询出来。
       	 部门信息在使用的时候再去查询
       	 分段查询的基础上增加两个配置
    -->
    <!--  -->
    <select id="getDeptByIdStep" resultType="com.test.mybatis.bean.Employee">
        select * from employee where d_id = #{deptId}
    </select>
 </mapper>