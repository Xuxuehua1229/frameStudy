一. Action 实现 ModelDriven 接口后的运行流程
  ① 先会执行 ModelDrivenInterceptor 的 intercept
  
    public String intercept(ActionInvocation invocation) throws Exception {
        // 获取 action 对象 ：EmployeeAction 已经实现了 ModelDriven 的接口
        // 例：public class EmployeeAction implements RequestAware,ModelDriven<Employee>{}
        Object action = invocation.getAction();
        
        //判断 action 是否是  ModelDriven 的实例
        if (action instanceof ModelDriven) {
            // 强制转换成 ModelDriven 类型
            ModelDriven modelDriven = (ModelDriven) action;
            // 获取值栈
            ValueStack stack = invocation.getStack();
            // 调用 ModelDriven 接口的 getModel() 方法
            // 即调用 EmployeeAction 实现 ModelDriven 接口之后的 getModel() 方法
            /*
              public Employee getModel() {
		         employee = new Employee();
		         return employee;
	          }
            */
            Object model = modelDriven.getModel();
            if (model !=  null) {
                // 把 getModel() 方法返回值压入到值栈的栈顶，实际压入的是 EmployeeAction 的 employee 成员变量
            	stack.push(model);
            }
            if (refreshModelBeforeResult) {
                invocation.addPreResultListener(new RefreshModelBeforeResult(modelDriven, model));
            }
        }
        return invocation.invoke();
    }
    
  ② 执行 ParametersIntercept 的 intercept 方法：把请求参数的值赋给栈顶对象对应的属性。若栈顶对象没有对应的属性，则查询值栈中下一个对象对应的属性...
  ③ 注意：getModel() 方法不能提供以下实现。  原因：这样实现的确是会返回一个 Employee 对象到值栈的栈顶。但当前 action 的 employee 成员变量为 null
    public Employee getModel() {
		return new Employee();
	}
	
二、使用 paramsPrepareParamsStack 拦截器栈后的运行流程
  ① paramsPrepareParamsStack 和 defaultStack 一样都是拦截器栈。而 struts-default 包默认使用的是 defaultStack
  ② 可以在 Struts 配置文件中通过以下方式修改使用的默认的拦截器栈
     <default-interceptor-ref name="paramsPrepareParamsStack"></default-interceptor-ref>
  ③ paramsPrepareParamsStack 拦截器在于  
     params -> modelDriven -> params
           所以可以先把请求参数赋给 Action 对应的属性，再根据赋给 Action 的那个属性值决定压到值栈栈顶的对象，最后再为栈顶对象的属性赋值
           对于 edit 而言：
      I   先为 EmployeeAction 的 employeeId 赋值
      II  根据 employeeId 从数据库中加载对于的对象，并放入到值栈的栈顶
      III 再为栈顶对象的 employeeId 赋值（实际上此时的 employeeId 属性值已经存在）
      IV  把栈顶对象的属性回显在表单中
  ④ 关于回显：Struts2 表单标签会从值栈中获取对应的属性值进行回显
  ⑤ 存在的问题：
      @Override
	  public Employee getModel() {
		//判断是 Create 还是  Edit
		//若为 Create,则 employee = new Employee();
		//若为 Edit,则 employee = dao.get(employee.getEmployeeId());
		//判断标准为是否有 employeeId 这个请求参数。若有该参数，则视为 Edit ，若没有该参数，则视为 Create
		//若通过 employeeId 来判断，则需要在 modelDriven 拦截器之前先执行一个 params 拦截器
		//而这个可以通过使用 paramsPrepareParams 拦截器实现。
		//需要在 struts.xml 文件中配置使用 paramsPrepareParams 作为默认的拦截器栈
		if(employeeId == null)
			employee = new Employee();
		else
			employee = dao.get(employeeId);
		return employee;
	  }
      I   在执行删除的时候，employeeId 不为 null,但 getModel() 方法却从数据库加载了一个对象。 不该加载！
      II  执行查询全部信息的方法时，也进入了 getModel() 方法中，创建了一个  new Employee() 对象。浪费！
   ⑥ 解决方案： 使用 PrepareInterceptor 和 Preaparble 接口
   ⑦ 关于 PrepareInterceptor
      1）分析后得到的结论
                 若 Action 实现了 Preaparble 接口，则 Struts2 将尝试执行  prepare[ActionMethodName] 方法，
                 若 prepare[ActionMethodName] 方法不存在，则将尝试执行 prepareDo[ActionMethodName]方法
                 若都不存在，就都不执行
                 若 PrepareInterceptor 的 alwaysInvokePrepare 属性为 false,则 Struts2 
                 将不会调用实现了 Preparable 接口的 Action 的 prepare() 方法
                 
      2）  能解决 ⑥ 中问题的方案：
                 可以为每一个 ActionMethod 准备 prepare[ActionMethodName] 方法，而抛掉原来的 prepare() 方法
                 将 PrepareInterceptor 的 alwaysInvokePrepare 属性设置为 false,以避免 Struts2 框架再调用 prepare() 方法
                 如何在 配置文件中为拦截器栈的属性赋值？？？ 查看 struts-2.5.18/docs/docs/core-developers/interceptors.html 文档
         <interceptors>
             <interceptor-stack name="parentStack">
                 <interceptor-ref name="defaultStack">
                     <param name="params.excludeParams">token</param>
                 </interceptor-ref>
             </interceptor-stack>
         </interceptors>

         <default-interceptor-ref name="parentStack"/>
      3） 源代码解析：
      public String doIntercept(ActionInvocation invocation) throws Exception {
        //获取 Action 实例
        Object action = invocation.getAction();
        //判断 Action 是否实现 Preparable 接口
        if (action instanceof Preparable) {
            try {
                String[] prefixes;
                //根据当前拦截器的 firstCallPrepareDo（默认为 false） 属性 确定 prefixes
                if (firstCallPrepareDo) {
                    prefixes = new String[] {ALT_PREPARE_PREFIX, PREPARE_PREFIX};
                } else {
                    prefixes = new String[] {PREPARE_PREFIX, ALT_PREPARE_PREFIX};
                }
                //若为 false ,则 prefixes: prepare,prepareDao
                //调用前缀方法
                PrefixMethodInvocationUtil.invokePrefixMethod(invocation, prefixes);
            }
            catch (InvocationTargetException e) {
                Throwable cause = e.getCause();
                if (cause instanceof Exception) {
                    throw (Exception) cause;
                } else if(cause instanceof Error) {
                    throw (Error) cause;
                } else {
                    throw e;
                }
            }
            //根据当前拦截器的  alwaysInvokePrepare（默认为 true）决定是否调用 Action 的 prepare 方法
            if (alwaysInvokePrepare) {
                ((Preparable) action).prepare();
            }
        }

        return invocation.invoke();
    }
    
    PrefixMethodInvocationUtil.invokePrefixMethod(invocation, prefixes) 方法：
    public static void invokePrefixMethod(ActionInvocation actionInvocation, String[] prefixes) throws InvocationTargetException, IllegalAccessException {
		//获取 Action 实例
		Object action = actionInvocation.getAction();
		//获取要调用的 Action 方法的名字（update）
		String methodName = actionInvocation.getProxy().getMethod();
		
		if (methodName == null) {
			// if null returns (possible according to the docs), use the default execute 
	        methodName = DEFAULT_INVOCATION_METHODNAME;
		}
		
		//获取前缀方法
		Method method = getPrefixedMethod(prefixes, methodName, action);
		//若方法不为 null，则通过反射调用前缀方法
		if (method != null) {
			method.invoke(action, new Object[0]);
		}
	}
	
	PrefixMethodInvocationUtil.getPrefixedMethod(prefixes, methodName, action)方法：
	public static Method getPrefixedMethod(String[] prefixes, String methodName, Object action) {
		assert(prefixes != null);
		//把方法首字母变成大写
		String capitalizedMethodName = capitalizeMethodName(methodName);
		//遍历前缀数组
        for (String prefixe : prefixes) {
            //通过拼接的方式，得到前缀方法名：第一次是 prepareUpdate 第二次是 prepareDoUpdate
            String prefixedMethodName = prefixe + capitalizedMethodName;
            try {
                //利用反射从 action 中获取对应的方法，若有直接返回，并结束循环
                return action.getClass().getMethod(prefixedMethodName, EMPTY_CLASS_ARRAY);
            }
            catch (NoSuchMethodException e) {
                // hmm -- OK, try next prefix
                LOG.debug("Cannot find method [{}] in action [{}]", prefixedMethodName, action);
            }
        }
		return null;
	}
三、Struts2 类型转换错误消息的显示和定制
问题1：如何覆盖默认的错误信息？
     1) 在对应的 Action 类所在的包中新建
        ActionClassName.properties 文件，ActionClassName 即为包含着输入 字段的 Action 类的类名。
     2) 在属性文件中添加如下键值对：invalid.fieldvalue.fieldName=xxxx
问题2：如果是 simple 主题，还会自动显示错误信息吗？如果不会显示，怎么办？
     1) 通过 debug 标签，可知如果转换出错，则在值栈的 Action(实现了 ValidationAware 接口) 对象中有一个 fieldErrors 属性，
                                 该属性的类型为 Map<String,List<String>> 键：字段（ 属性名），值：错误消息组成的 List. 所以可以使用 LE 或 OGNL 的方式
                                 来显示错误消息：${fieldErrors.age[0]}
     2) 还可以使用 s:fieldErrors 标签来显示，可以通过 fieldName 属性显示指定字段的错误
     3) 若是 simple 主题，且使用 <s:fielderror fieldName="age"></s:fielderror> 来显示错误信息，则该消息在一个 ul,li,span 中，
                                如何去除 ul,li,span 呢？
                                在 template.simple 下面的  fielderror.ftl 定义了 simple 主题下，s:fielderror 标签显示错误消息的样式。所以修改该配置文件即可
                                在 src 下新建 template.simple 包，新建 fielderror.ftl 文件，把原生的 fielderror.ftl 中的内容复制到新建的 fielderror.ftl中，
                                然后剔除掉 ul,li,span 部分即可